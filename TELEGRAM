<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-06-17T04:00:00Z</date>
    <media_types>
        <media_type>
            <name>Telegram</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>Message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>ParseMode</name>
                    <value>Markdown</value>
                </parameter>
                <parameter>
                    <name>Severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>Subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>To</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>Token</name>
                    <value>1151853797:AAGhXq3csYTOfeRmsDYGZwOb9QlR6DQ9oU0</value>
                </parameter>
                <parameter>
                    <name>Trigger_status</name>
                    <value>{TRIGGER.STATUS}</value>
                </parameter>
            </parameters>
            <script>var Telegram = {&#13;
    token: null,&#13;
    to: null,&#13;
    message: null,&#13;
    proxy: null,&#13;
    parse_mode: null,&#13;
 &#13;
    sendMessage: function() {&#13;
        var params = {&#13;
            chat_id: Telegram.to,&#13;
            text: Telegram.message,&#13;
            disable_web_page_preview: true,&#13;
            disable_notification: false&#13;
        },&#13;
        data,&#13;
        response,&#13;
        request = new CurlHttpRequest(),&#13;
        url = 'https://api.telegram.org/bot' + Telegram.token + '/sendMessage';&#13;
 &#13;
        if (Telegram.parse_mode !== null) {&#13;
            params['parse_mode'] = Telegram.parse_mode;&#13;
        }&#13;
 &#13;
        if (Telegram.proxy) {&#13;
            request.setProxy(Telegram.proxy);&#13;
        }&#13;
 &#13;
        request.AddHeader('Content-Type: application/json');&#13;
        data = JSON.stringify(params);&#13;
 &#13;
        // Remove replace() function if you want to see the exposed token in the log file.&#13;
        Zabbix.Log(4, '[Telegram Webhook] URL: ' + url.replace(Telegram.token, '&lt;TOKEN&gt;'));&#13;
        Zabbix.Log(4, '[Telegram Webhook] params: ' + data);&#13;
        response = request.Post(url, data);&#13;
        Zabbix.Log(4, '[Telegram Webhook] HTTP code: ' + request.Status());&#13;
 &#13;
        try {&#13;
            response = JSON.parse(response);&#13;
        }&#13;
        catch (error) {&#13;
            response = null;&#13;
        }&#13;
 &#13;
        if (request.Status() !== 200 || typeof response.ok !== 'boolean' || response.ok !== true) {&#13;
            if (typeof response.description === 'string') {&#13;
                throw response.description;&#13;
            }&#13;
            else {&#13;
                throw 'Unknown error. Check debug log for more information.'&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
 &#13;
try {&#13;
    var params = JSON.parse(value);&#13;
    var icon;&#13;
 &#13;
    if (typeof params.Token === 'undefined') {&#13;
        throw 'Incorrect value is given for parameter &quot;Token&quot;: parameter is missing';&#13;
    }&#13;
 &#13;
    Telegram.token = params.Token;&#13;
 &#13;
    if (params.HTTPProxy) {&#13;
        Telegram.proxy = params.HTTPProxy;&#13;
    } &#13;
 &#13;
    if (['Markdown', 'HTML', 'MarkdownV2'].indexOf(params.ParseMode) !== -1) {&#13;
        Telegram.parse_mode = params.ParseMode;&#13;
    }&#13;
 &#13;
    if (params.Severity == 'Warning') {&#13;
        icon = '⚠️';&#13;
    } else if (params.Severity == 'Average') {&#13;
        icon = '⛔';&#13;
    } else if (params.Severity == 'High') {&#13;
        icon = '❌';&#13;
    } else {&#13;
        icon = String.fromCodePoint('0x1F525');&#13;
    }&#13;
 &#13;
    if (params.Trigger_status == 'OK') {&#13;
        icon = '✅';&#13;
    }&#13;
    Telegram.to = params.To;&#13;
    Telegram.message = icon + ' ' + params.Subject + '\n' + params.Message;&#13;
    Telegram.sendMessage();&#13;
 &#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(4, '[Telegram Webhook] notification failed: ' + error);&#13;
    throw 'Sending failed: ' + error + '.';&#13;
}</script>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved in {EVENT.DURATION}: {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
